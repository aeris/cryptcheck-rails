<div class="container">
	<div class="row">
		<div class="col-sm-10">
			<h1>
				[<%= self.type.to_s.upcase %>] <%= @host %>
				<span class="small">(<%= l @analysis.updated_at %>)</span>
			</h1>
		</div>
		<div class="col-sm-2 text-end">
		<% if @analysis.refresh_at.nil? || Time.now >= @analysis.refresh_at %>
			<%= link_to t('Refresh'), { action: :refresh }, class: %i(btn btn-outline-secondary) %>
		<% else %>
			<%= button_tag t('Refresh not available', date: l(@analysis.refresh_at, format: :time)),
							   type: :button, class: %i(btn btn-outline-secondary), disabled: true %>
		<% end %>
		</div>
	</div>

	<% @result.each do |host|
	  if host.error %>
		<div class="row">
			<div class="col-sm-12">
				<h2>
					<%= rank_label :X %>
					<%= host[:ip] %> : <%= host[:port] %>
					<span class="small">(<%= host[:hostname] %>)</span>
				</h2>
				<%= t 'Error during analysis:' %>
				<span class="label label-error"><%= host.error %></span>
			</div>
		</div>
	<% next; end %>
	<div class="row">
		<div class="col-sm-12">
			<h2>
				<%= rank_label host[:grade] %>
				<%= host[:ip] %> : <%= host[:port] %>
				<span class="small">(<%= host[:hostname] %>)</span></h2>
		</div>
	</div>

	<div class="row">
		<div class="col-sm-12">
			<table class="table table-bordered table-condensed table-striped center">
				<thead>
				<tr>
					<th rowspan="2"><%= t 'Name' %></th>
					<th rowspan="2"><%= t 'Key exchange' %></th>
					<th rowspan="2"><%= t 'Authentication' %></th>
					<th colspan="4"><%= t 'Encryption' %></th>
					<th colspan="2"><%= t 'MAC' %></th>
					<th rowspan="2"><%= t 'PFS' %></th>
				</tr>
				<tr>
					<th><%= t 'Type' %></th>
					<th><%= t 'Key size' %></th>
					<th><%= t 'Block size' %></th>
					<th><%= t 'Mode' %></th>
					<th><%= t 'Type' %></th>
					<th><%= t 'Size' %></th>
				</tr>
				</thead>
				<tbody>
				<%
					handshakes = host[:handshakes]
					all_ciphers = handshakes[:ciphers].group_by { |c| c[:protocol] }
					CryptCheck::Tls::Method.each do |protocol|
					  ciphers = all_ciphers.fetch(protocol.to_sym.to_s, [])
							  .collect { |c| CryptCheck::Tls::Cipher.new protocol, c[:name] }.sort
					  unless ciphers.empty?         %>
						<tr>
							<th colspan="12"><%= protocol_label protocol %></th>
						</tr>
						<% ciphers.each do |cipher|
						  kex    = cipher.kex
						  auth   = cipher.auth
						  enc    = cipher.encryption
						  mac    = cipher.hmac
						  pfs    = cipher.pfs?
        %>
							<tr>
								<th><%= cipher_name_label cipher %></th>
								<%= cipher_kex_type_cell kex %>
								<%= cipher_auth_type_cell auth %>
								<%= cipher_enc_type_cell enc[0] %>
								<%= cipher_enc_key_size_cell enc[1] %>
								<%= cipher_enc_block_size_cell enc[2] %>
								<%= cipher_enc_mode_cell enc[3] %>
								<%= cipher_mac_type_cell mac[0] %>
								<%= cipher_mac_size_cell mac[1] %>
								<%= cipher_pfs_cell pfs %>
							</tr>
						<% end end end %>
				</tbody>
			</table>
		</div>
	</div>
	<% end %>
</div>
